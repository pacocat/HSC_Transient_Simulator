import numpy as npcamera_type = 0 # [0:SC 1:HSC]object_type = 0# 0:SN Ia 1:SN IIL 2:SN IIPoffset = 0.0BVconverter = 0.197camera_name = 'SC' if camera_type == 0 else 'HSC'if object_type == 0: targetdir = 'Hsiao_Ia'elif object_type == 1: targetdir = 'Nugent_IIL'elif object_type == 2: targetdir = 'Nugent_IIP'if offset == 0.0: offset_suffix = ''elif offset == 0.2: offset_suffix = '_p02'elif offset == -0.2: offset_suffix = '_m02'if object_type == 0:    for z in np.arange(0.00, 2.01, 0.05):        print 'making zfile(%s) at z=%.2f...' % (targetdir.split('_')[1], z)        fout = open('./zfile_%s/zfile%03d.txt' % (targetdir.split('_')[1][:2], z*100.1),'w')        SDSSfile = open('SDSS_Ia_sort.txt','r') ###        template = np.loadtxt('../../LCtemplate/%s/%s/z%03d.dat' % (camera_name, targetdir, z*100.1))        imax = min(template[:,19]) if camera_type == 0 else min(template[:,18])        for line in SDSSfile.readlines():            line = line.split()            SDSSID, SNID = line[0], line[1]            MB_Vega, Berr = eval(line[6]), eval(line[7])            sfB, sfBerr = eval(line[8]), eval(line[9])            imag = imax + (MB_Vega+18.0)            fout.write('%8s %8s  %6.3f %6.3f %6.3f %6.3f %6.3f\n' % (SDSSID, SNID, imag, MB_Vega, Berr, sfB, sfBerr))        fout.close()        SDSSfile.close()else:    for z in np.arange(0.00, 2.01, 0.05):        print 'making zfile(%s) at z=%.2f...' % (targetdir.split('_')[1], z)        fout = open('./zfile_II/zfile%03d%s.txt' % (z*100.1, offset_suffix),'w')        SDSSfile = open('./SNIIsampling/SNIIsample_z017%s.txt' % offset_suffix,'r') # 'SNIIsample_z020.txt', 'SNIIsample_corrected.txt'        template = np.loadtxt('../../LCtemplate/%s/%s/z%03d.dat' % (camera_name, targetdir, z*100.1))        imax = min(template[:,19]) if camera_type == 0 else min(template[:,18])        for line in SDSSfile.readlines():            line = line.split()            SDSSID, redshift = line[0], eval(line[1])            MV_Vega, Verr = eval(line[2]), eval(line[4])            imag = imax + (MV_Vega + BVconverter + 18.0)            fout.write('%8s  %6.3f %6.3f %6.3f\n' % (SDSSID, imag, MV_Vega, Verr))        fout.close()        SDSSfile.close()print 'That\'s all forks!'