#!/opt/local/bin/python"""# Written by Jun E. Okumura in 2014.02# contact paco.sci@gmail.com if you have any questions or comments.This code plot extrapolated light curves generated by "make_template.py".## NOTE ##To run this code, numpy should be installed. The author used version '1.8.0'See http://www.numpy.org/ if you do not have numpy."""import numpy as npfrom matplotlib.pyplot import plot, fill_between, xlim, ylim, legend, xlabel, ylabel, title, text, savefig, clf### options ###camera_type = 0# [0:SC 1:HSC]object_type = 0# 0:SN Ia (Hsiao) 1:SN Ia (Nugent) 2:SN Ia-91bg (Nugent) 3:SN Ia-91T (Nugent)# 4:SN Ibc (Nugent) 5:SN IIL (Nugent) 6:SN IIP (Nugent) 7:SN IIn (Nugent)# set up directory nameif object_type == 0: targetdir = 'Hsiao_Ia'elif object_type == 1: targetdir = 'Nugent_Ia'elif object_type == 2: targetdir = 'Nugent_Ia91bg'elif object_type == 3: targetdir = 'Nugent_Ia91T'elif object_type == 4: targetdir = 'Nugent_Ibc'elif object_type == 5: targetdir = 'Nugent_IIL'elif object_type == 6: targetdir = 'Nugent_IIP'elif object_type == 7: targetdir = 'Nugent_IIn'else: print 'Please set correct number for \'object_type\':0-6'camera_name = 'SC' if camera_type == 0 else 'HSC'bands = ['B','V','R','i','z'] if camera_type == 0 else ['g','r','i','z','y']# extract mlim (baseline magnitude)data = np.loadtxt('./%s/%s/z000_ext.dat' % (camera_name,targetdir))mlim = data[0,1]# start making template light curvesprint 'plotting %s SN %s templates in ./%s/%s/' % (targetdir.split('_')[0], targetdir.split('_')[0], camera_name, targetdir)for z in np.arange(0.0,2.01,0.05):#for z in [0.25]:    print 'plotting light curve template at z=%.2f' % (z)    # load light curve at redshift z    data = np.loadtxt('./%s/%s/z%03d_ext.dat' % (camera_name,targetdir,z*100.1))    # plot light curves for each bands    plot(data[:,0],data[:,1],'-', color = 'blue')    plot(data[:,0],data[:,2],'-', color = 'green')    plot(data[:,0],data[:,3],'-', color = 'yellow')    plot(data[:,0],data[:,4],'-', color = 'orange')    plot(data[:,0],data[:,5],'-', color = 'red')    legend((bands[0],bands[1],bands[2],bands[3],bands[4]),frameon=False)    # define xrange and yrange    if z>1.5 and data[-1,0]>300.0:        x_min, x_max = data[0,0], 300.0    else:        x_min, x_max = data[0,0], data[-1,0]    xlim(x_min, x_max)    y_min, y_max = data[0,1], min(data[:,1:].min(), data[0,1]-3.0)-0.5    ylim(y_min, y_max)    # extrapolated regions are plotted in blue dots    plot([data[-6,0]]*5,data[-6,1:],'bo')    plot([data[2,0]]*5,data[2,1:],'bo')    # plot holizontal line at 26.5 mag    plot([data[0,0],data[-1,0]], [26.5, 26.5],'--', color='orange')    text(x_min+(x_max-x_min)*0.02 , 26.5, '26.5 mag', verticalalignment='bottom')    # plot holizontal line at 27.5 mag    plot([data[0,0],data[-1,0]], [27.5, 27.5],'--', color='yellow')    text(x_min+(x_max-x_min)*0.02 , 27.5, '27.5 mag', verticalalignment='bottom')    # setting labels    xlabel('observer-frame phase [day]', fontsize=15)    ylabel('observed magnitude', fontsize=15)    text(x_min+(x_max-x_min)*0.6, y_min+(y_max-y_min)*0.02, 'blue dots mark the extrapolated regions',fontsize=8)    title('%s SN %s template' % (targetdir.split('_')[0], targetdir.split('_')[1]) + r'($z = %.2f,$ $M_{B,Vega} = -18.0$)' % z, fontsize=20)    # savefigure    savefig('./%s/%s/z%03d_ext.eps' % (camera_name,targetdir,z*100.1), pad_inches=0.05)    clf()print 'That\'s all forks!'